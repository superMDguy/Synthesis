.TH TCLDOT 1 "30 March 1995"

.SH NAME

tcldot \- directed graph manipulation in tcl

.SH SYNOPSIS

.BI tcldot " <standard tclsh switches and args>"
.PP
.BI tkdot " <standard wish switches and args>"

.SH INTRODUCTION

.B tcldot
is a tcl interpreter extension that incorporates the directed graph
facilities of 
.B dot(1) 
and provides a set of interpreted commands to control those
facilities.
.B tcldot
converts
.B dot
from a batch processing tool to an interpreted and, if needed, interactive set
of graph manipulation facilities.

.B tkdot
is the same extension added to wish with the single additional facility of rendering
graphs directly to wish's canvas widget.  In the remainder of this man
page we refer simply to 
.B tcldot,
but all the commands except render are available in both
.B tcldot
and
.B tkdot.
.PP

.SH USAGE

.B tcldot
reads a file specified on the command line for a list of commands to execute.
.B tcldot
may also be invoked implicitly on systems which support the #! notation
by marking the script executable, and making the first line in your script:
.nf

	#!/usr/local/bin/tcldot

.fi
Of course, the path must accurately describe where
.B tcldot
lives.  /usr/local/bin is just an example.
.B tcldot 
adds no new command line flags or arguments so please refer to 
.B tclsh(1)
or 
.B wish(1)
for descriptions of the command line.

.SH COMMANDS

.B tcldot
uses
.I Tcl
(Tool Command Language).
Tcl provides control flow (e.g., if, for, break),
expression evaluation and several other features such as recursion,
procedure definition, etc.
Commands used here but not defined (e.g.,
.BR set ,
.BR if ,
.BR exec )
are Tcl commands (see
.B Tcl(n)
).
.B tcldot
supports several additional commands, described below.
Nearly all
.B tcldot
commands return a value, usually the handle of a node, edge, or graph.
The handles are themselves registered as commands to permit direct
operations on node, edge, or graph instances after they have been
created.
.B tcldot
adds only two commands to the 
.B tcl
interpreter at start up, namely 
.B dotnew
and
.B dotread.
All other "commands" are of the form:
.I handle
.B <message>
.I parameters

The commands are described in detail below, but in summary:
.br
Graph commands are:
.B "addedge, addnode, addsubgraph, countedges, countnodes, layout, listattributes, listedgeattributes, listnodeattributes, listnodes, listsubgraphs, render, rendergd, queryattributes, setattributes, setedgeattributes, setnodeattributes, showname, write."
.br
Node commands are:
.B "addedge, listattributes, listedges, listinedges, listoutedges, queryattributes, setattributes, showname."
.br
Edge commands are: 
.B "delete, listattributes, listnodes, queryattributes, setattributes, showname."

.TP
\fBdotnew\fR \fIgraphType ?attributeName attributeValue? ?...?\fR

creates a new empty graph and returns its 
.I graphHandle.

.I graphType
can be any supported by 
.B dot(1)
namely: "graph," "digraph," "graphstrict," or "digraphstrict."
(In digraphs edges have a direction from tail to head. "Strict" graphs
or digraphs collapse multiple edges between the same pair of
nodes into a single edge.)

Following the mandatory 
.I graphType
parameter the 
.B dotnew
command will accept an arbitrary number of attribute name/value pairs
for the graph.
Certain special graph attributes and permitted values are described in
.B dot(1), 
but the programmer can arbitrarily invent and assign values
to additional attributes beyond these.
In 
.B dot
the attribute name is separated from the value by an "=" character.
In
.B tcldot
the "=" has been replaced by a " " (space)  to be more consistent
with
.B tcl
syntax.
e.g.
.nf

	set g [dotnew digraph rankdir LR]

.fi
.TP
\fBdotread\fR \fIfileHandle\fR

reads in a dot-language description of a graph from a previously opened
file identified by the 
.I fileHandle.
The command returns the
.I graphHandle
of the newly read graph.  e.g.
.nf
	
	set f [open test.dot r]
	set g [dotread $f]

.fi
.TP
\fIgraphHandle\fR \fBaddnode\fR \fI?nodeName? ?attributeName attributeValue? ?...?\fR

creates a new node in the graph whose handle is
.I graphHandle
and returns its
.I nodeHandle.
The handle of a node is a string like: "node0" where the integer value is
different for each node.
There can be an arbitrary number of attribute name/value pairs
for the node.
Certain special node attributes and permitted values are described in
.B dot(1), 
but the programmer can arbitrarily invent and assign values
to additional attributes beyond these.
e.g.
.nf
	
	set n [$g addnode "N" label "Top\\nNode" shape triangle eggs easyover]

.fi
A possible cause of confusion in 
.B tcldot
is the distinction between handles, names, labels, and variables.
The distinction is primarily in who owns them.
Handles are owned by tcldot and are guaranteed to be unique within
one interpreter session.  Typically handles are assigned to variables,
like "n" above, for manipulation within a tcl script.
Variables are owned by the programmer.
Names are owned by the application that is using the
graph, typically names are important when reading in a graph from
an external program or file.  Labels are the text that is displayed with
the node
(or edge) when the graph is displayed, labels are meaningful to the
reader of the graph.  Only the handles and variables are essential to 
.B tcldot's
ability to manipulate abstract graphs.  If a name is not specified then
it defaults to the string representation of the handle, if a label is
not specified then it defaults to the name.

.TP
\fIgraphHandle\fR \fBaddedge\fR \fItailNode headNode ?attributeName attributeValue? ?...?\fR

creates a new edge in the graph whose handle is
.I graphHandle
and returns its
.B edgeHandle.
.I tailNode 
and
.I headNode
can be specified either by their
.I nodeHandle
or by their 
.I nodeName.
e.g.
.nf

	set n [$g addnode]
	set m [$g addnode]
	$g addedge $n $m label "NM"

	$g addnode N
	$g addnode M
	$g addedge N M label "NM"

.fi
The argument is recognized as a handle if possible and so it is best
to avoid names like "node6" for nodes.  If there is potential for conflict then use
.B findnode
to translate explicitly from names to handles.
e.g.
.nf

	$g addnode "node6"
	$g addnode "node99"
	$g addedge [$g findnode "node6"] [$g findnode "node99"]

.fi
There can be an arbitrary number of attribute name/value pairs
for the edge.
Certain special edge attributes and permitted values are described in
.B dot(1), 
but the programmer can arbitrarily invent and assign values
to additional attributes beyond these.

.TP
\fIgraphHandle\fR \fBaddsubgraph\fR \fI?graphName? ?attributeName attributeValue? ?...?\fR

creates a new subgraph in the graph and returns its
.I graphHandle.
If the
.I graphName
is omitted then the name of the subgraph defaults to it's 
.I graphHandle.
There can be an arbitrary number of attribute name/value pairs
for the subgraph.
Certain special graph attributes and permitted values are described in
.B dot(1), 
but the programmer can arbitrarily invent and assign values
to additional attributes beyond these.
e.g.
.nf
	
	set sg [$g addsubgraph dinglefactor 6]

.fi
Clusters, as described in
.B dot(1),
are created by giving the subgraph a name that begins with the string:
"cluster".
e.g.
.nf
	
	set cg [$g addsubgraph cluster_A dinglefactor 6]

.fi
.TP
\fInodeHandle\fR \fBaddedge\fR \fIheadNode ?attributeName attributeValue? ?...?\fR

creates a new edge from the tail node identified by tha
.I nodeHandle
to the 
.I headNode
which can be specified either by 
.I nodeHandle
or by 
.I nodeName
(with preference to recognizing the argument as a handle).
The graph in which this is drawn is the graph in which both nodes are
members.
There can be an arbitrary number of attribute name/value pairs
for the edge.
These edge attributes and permitted values are described in
.B dot(1).
e.g.
.nf

	[$g addnode] addedge [$g addnode] label "NM"

.fi
.TP 
\fIgraphHandle\fR \fBdelete\fR
.TP
\fInodeHandle\fR \fBdelete\fR
.TP
\fIedgeHandle\fR \fBdelete\fR

Delete all data structures associated with the graph, node or edge
from the internal storage of the interpreter.  Deletion of a node also
results in the the deletion of all subtending edges on that node.
Deletion of a graph also results in the deletion of all nodes and
subgraphs within that graph (and hence all edges too).  The return from
these delete commands is a null string.

.TP
\fIgraphHandle\fR \fBcountnodes\fR
.TP
\fIgraphHandle\fR \fBcountedges\fR

Returns the number of nodes, or edges, in the graph.

.TP
\fIgraphHandle\fR \fBlistnodes\fR
.TP
\fIgraphHandle\fR \fBlistsubgraphs\fR
.TP
\fInodeHandle\fR \fBlistedges\fR
.TP
\fInodeHandle\fR \fBlistinedges\fR
.TP
\fInodeHandle\fR \fBlistoutedges\fR
.TP
\fIedgeHandle\fR \fBlistnodes\fR

Each return a list of handles of graphs, nodes or edges, as appropriate.

.TP
\fIgraphHandle\fR \fBfindnode\fR \fInodeName\fR
.TP
\fIgraphHandle\fR \fBfindedge\fR \fItailnodeName headNodeName\fR
.TP
\fInodeHandle\fR \fBfindedge\fR \fInodeName\R

Each return the handle of the item if found, or an error if none are found.  
For non-strict graphs when there are multiple edges between two nodes
.B findedge
will return an arbitrary edge from the set.

.TP
\fIgraphHandle\fR \fBshowname\fR
.TP
\fInodeHandle\fR \fBshowname\fR
.TP
\fIedgeHandle\fR \fBshowname\fR

Each return the name of the item.  Edge names are of the form:
"a->b" where "a" and "b" are the names of the nodes and the connector
"->" indicates the tail-to-head direction of the edge. In undirected
graphs the connector "--" is used.

.TP
\fIgraphHandle\fR \fBsetgraphdefaults\fR \fIattributeName attributeValue ?...?\fR
.TP
\fIgraphHandle\fR \fBsetnodedefaults\fR \fIattributeName attributeValue ?...?\fR
.TP
\fIgraphHandle\fR \fBsetedgedefaults\fR \fIattributeName attributeValue ?...?\fR

Set one or more default attribute name/values that are to apply to
all subsequent sugbraphs, nodes, or edges unless overridden.

.TP
\fIgraphHandle\fR \fBsetattributes\fR \fIattributeName attributeValue ?...?\fR
.TP
\fInodeHandle\fR \fBsetattributes\fR \fIattributeName attributeValue ?...?\fR
.TP
\fIedgeHandle\fR \fBsetattributes\fR \fIattributeName attributeValue ?...?\fR

Set one or more attribute name/value pairs for a specific graph, node,
or edge instance.

.TP
\fIgraphHandle\fR \fBlistattributes\fR
.TP
\fInodeHandle\fR \fBlistattributes\fR
.TP
\fIedgeHandle\fR \fBlistattributes\fR

Return a list of attribute names (attribute values are provided by
.B queryattribute
	
.TP
\fIgraphHandle\fR \fBqueryattributes\fR \fIattributeName ?...?\fR
.TP
\fInodeHandle\fR \fBqueryattributes\fR \fIattributeName ?...?\fR
.TP
\fIedgeHandle\fR \fBqueryattributes\fR \fIattributeName ?...?\fR

Return a list of attribute value, one value for each of the
attribute names provided with the command.

.TP
\fIgraphHandle\fR \fBlayout\fR

Annotate the graph with layout information.  This commands takes an
abstract graph add shape and position information to it according to 
.B dot's
rules of eye-pleasing graph layout.  The result of the layout is stored
as additional attributes name/value pairs in the graph, node and edges.
These attributes are indended to be interpreted by subsequent 
.I write
or
.I render
commands.

(Implementation note: In a future release of
.B tcldot
I expect to further split the 
.B layout
command into 
.B placenodes
and
.B routeedges
so that alternate placement and routing strategies can be offered.)

.TP
\fIgraphHandle\fR \fBwrite\fR \fIfileHandle format\fR

Write a graph (with already computed layout annotation) to the open file
represented by
.I fileHandle
in a specific
.I format.
Possible
.I formats
are: "ps" "mif" "hpgl" "plain" "dot" "gif" "ismap"

.TP
\fIgraphHandle\fR \fBrendergd\fR \fIgdHandle\fR

Generates a rendering of a (previously layed out graph) to a new
or existing gifImage structure (see
.B gdTcl(1)
).  Returns the 
.I gdHandle
of the image.

.TP
\fIgraphHandle\fR \fBrender\fR

Returns a string of commands which, when evaluated, will render the
graph to a 
.B Tk
canvas whose 
.I canvasHandle
is available in variable 
.B $c
This command is available in 
.B tkdot
only. e.g.
.nf

	set g [dotnew digraph rankdir LR]
	[$g addnode Hello] addedge [$g addnode World!]
	set c [canvas .c]
	pack append . $c {}
	$g layout
	eval [$g render]

.fi
.B render
generates a series of canvas commands for each graph element, for example
a node typically consist of two items on the canvas, one for the shape
and the other for the label.  The canvas items are automatically 
.I tagged
(See
.B canvas(n)
) by the commands generated by render.  The tags take one of two forms:
text items are tagged with 0<handle> and
shapes and lines are rendered with 1<handle>.

The tagging can be used to recognize when a user wants to interact with
a graph element using the mouse.  See the script in
.I examples/disp
of the tcldot distribution for a demonstration of this facility.

.SH BUGS

None, of course.

.SH AUTHOR

John Ellson, AT&T Bell Labs, Holmdel, NJ. (John.Ellson@att.com)

.SH ACKNOWLEDGEMENTS

John Ousterhout, of course, for 
.B tcl
and
.B tk.
Steven North and Eleftherios Koutsofios for
.B dot.
Karl Lehenbauer and Mark Diekhans of NeoSoft
for the handles.c code which was derived from tclXhandles.c.
Tom Boutell of the Quest Center at Cold Spring Harbor Labs for the gif drawing routines.
Spencer Thomas of the University of Michigan for gdTcl.c.
Dayatra Shands for coding much of the initial implementation of 
.B tcldot.

.SH KEYWORDS

graph, tcl, tk, dot
