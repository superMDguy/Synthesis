
#
# Rules for shallow parser, see the README file for
# a description of the format.
#
# The shallow parser was developed by Ido Dagan and Yuval Krymolowski, based on
# work by Dror Ben-Arie. Contact yuvalk@cs.biu.ac.il for technical
# issues.
#
# Note - the rules are not finalized yet.
#
    # Basic string macros   (see the description of the input file)
    #--------------------

# Matches any string which is not a delimiter
    anystr   =  [^/] *
    anystr_not_null   =  [^/] +

# identify a word - {.../
    anyword =  {[^/]+/

# look for the next delimiter, this pattern always follows a word
# or $anyword .
    anypos  =   [^/]+/

# looks for } closing bracket, this pattern always follows a part
# of speech pattern or $anypos
    anylema =   [^}]+}

    anytoken = $anyword $anypos $anylema
anyhead = ( << [^/] [^>]* >> ) *  # <<xxx-n>> ... <</xxx-n>> bracket 
anytail = ( << / [^>]* >> ) *     # the n'th occurence of rule xxx 
anyheadword = $anyhead $anyword
any = $anyhead $anyword $anypos $anylema $anytail

    # tags of the basic parts of speech
    #----------------------------------
    #
    adj_pos   =   J $anystr /   # adjective (JJ,JJR,JJS)
    adv_pos   =   RB $anystr  / # adverb    (RB,RBR,RBS)
    cc_pos    =   CC /            # coordinating conjunction
    cd_pos    =   CD /            # cardinal number
    dt_pos    =   DT /            # determiner
    ex_pos    =   EX /            # existential "there"
    fw_pos    =   FW /            # foreign word
    ls_pos    =   LS /            # list item marker
    modal_pos =   MD /            # modal
    noun_pos  =   NN[S]? /        # noun (NN,NNS; proper noun excluded)
    noun_prop_noun_pos  =   N $anystr  /   # noun      (NN,NNS,NNP,NNPS)
    noun_single_pos =  N[N]?[P]? /   # single noun (may be proper)
    noun_single_not_prop_pos =  NN /   # single noun (NOT proper)
    prop_noun_pos =  N[N]?P[S]? /    # proper noun
    particle_pos =  RP /          # particle
    pdt_pos   =   PDT /           # predeterminer
    pos_pos   =   POS /           # possessive ending
    pp_pos    =   PRP /           # personal pronoun
    ppd_pos   =   PRP\$ /         # possessive pronoun
    prep_pos  =   IN /            # preposition or subordinating conjunction
    to_pos    =   TO /            # "to"
    uh_pos    =   UH /            # interjection
    verb_pos  =   V $anystr  /    # verb      (VB,VBD,VBG,VBN,VBP,VBZ)
    vb_pos    =   VB /            # verb - base form
    vbd_pos   =   VBD /           # verb - past tense
    vbg_pos   =   VBG /           # verb - gerund
    vbn_pos   =   VBN /           # verb - past participle
    vbp_pos   =   VBP /           # verb - non-3rd-person-singular present
    vbz_pos   =   VBZ /           # verb - 3rd-person-singular present
    vbgn_pos  =   VB[GN] /        # verb - gerund or past participle
    wdt_pos   =   WDT /           # wh-determiner
    wp_pos    =   WP /            # wh-pronoun
    wpd_pos   =   WP\$ /          # possessive wh-pronoun
    wrb_pos   =   WRB /           # wh-adverb


    not_vbgn_pos =  VB[^GN]? /    # verb - neither gerund nor past participle

#
# words with the corresponding tags
# ---------------------------------
#

    adj       =  $anyword $adj_pos $anylema
    adv       =  $anyword $adv_pos $anylema
    cc        =  $anyword $cc_pos $anylema
    cd        =  $anyword $cd_pos $anylema
    dt        =  $anyword $dt_pos $anylema
    ex        =  $anyword $ex_pos $anylema
    fw        =  $anyword $fw_pos $anylema
    ls        =  $anyword $ls_pos $anylema
    modal     =  $anyword $modal_pos $anylema
    noun      =  $anyword $noun_pos $anylema
    noun_prop_noun = $anyword $noun_prop_noun_pos $anylema
    noun_single = $anyword $noun_single_pos $anylema
    noun_single_not_prop =  $anyword $noun_single_not_prop_pos $anylema
    prop_noun =  $anyword $prop_noun_pos $anylema
    particle  =  $anyword $particle_pos $anylema
    pdt       =  $anyword $pdt_pos $anylema
    pos       =  $anyword $pos_pos $anylema
    pp        =  $anyword $pp_pos $anylema
    ppd       =  $anyword $ppd_pos $anylema
    prep      =  $anyword $prep_pos $anylema
    to        =  $anyword $to_pos $anylema
    uh        =  $anyword $uh_pos $anylema
    verb      =  $anyword $verb_pos $anylema
    vb        =  $anyword $vb_pos $anylema
    vbd       =  $anyword $vbd_pos $anylema
    vbg       =  $anyword $vbg_pos $anylema
    vbn       =  $anyword $vbn_pos $anylema
    vbp       =  $anyword $vbp_pos $anylema
    vbz       =  $anyword $vbz_pos $anylema
    vbgn      =  $anyword $vbgn_pos $anylema
    wdt       =  $anyword $wdt_pos $anylema
    wp        =  $anyword $wp_pos $anylema
    wpd       =  $anyword $wpd_pos $anylema
    wrb       =  $anyword $wrb_pos $anylema

#
# specific words
#
    comma     =  {,/,/ $anylema  
    of_prep   =  {of/ $prep_pos $anylema 
    dlr       =  {\$/\$/ $anylema                  # currency sign
    out       =  {out/ $anypos $anylema 
    newline   =  ^
    duration_w  =  { ( years | months | weeks | days | hours ) /

# tagged words, NOT belonging to specific categories

    not_adj_adv = $anyword [^JR] $anystr / $anylema 
    not_adv_v = $anyword [^VR] $anystr / $anylema
    not_adv_v_adj = $anyword [^VRJ] $anystr / $anylema
    not_cd_n  = $anyword ( [^CN] | ( C[^D] ) ) $anystr / $anylema
    not_cd_n_ex_verb  = $anyword ( [^CMNV] | ( C[^D] ) ) $anystr / $anylema
    not_n_adj = $anyword [^NJ] $anystr / $anylema
    not_prep  = $anyword [^I] $anystr / $anylema
    not_verb  = $anyword [^V] $anystr / $anylema
    not_vbgn  = $anyword $not_vbgn_pos $anylema 

#
# small utility relations 
#
    age       := $cd $duration_w $anypos $anylema {old/ $anypos $anylema

    hyphen = {-/:/-}
    open_paren = {(/ $anypos (}
    close_paren = {)/ $anypos )}
    prop_noun_mod = ( $prop_noun ( $cc | $hyphen ) ? ) * 
    prop_noun_unit := $prop_noun_mod n1=$prop_noun ( $of_prep $dt ? \
	$prop_noun_mod $prop_noun ) *
    paren_pn_unit := $open_paren $prop_noun_mod main=$prop_noun $close_paren
    prop_noun_seq = $prop_noun_unit $paren_pn_unit ?

#
# disjunctions of syntactical categories
#
    ex_adj    :=  $adj | $vbn | $vbg | $age 
    ex_cc     =  $cc | $comma 
    ex_prep   =  $prep | $to 
    ex_verb   =  $verb | $modal 

#
# Subordinating conjunctions are tagged in the input file in the same way as
# prepositions. To distinguish between the two kinds, we have a list of words
# that are never used as prepositions. This list is partial, and it does not
# include words that belong to both categories (such as "before").
#
    conj_prep =  { ( [Tt]hat | [Bb]ecause | [Ww]hether | [Ii]f | ([Aa]l)?though ) / $prep_pos $anylema


# disallows: although,because,if,that,though,whether
    prep_not_conj =  { ( ( [^AaBbIiTtWw] $anystr )|        \
                          ( [Aa][^l] $anystr )|           \
                          ( [Aa]l[^t] $anystr )|          \
                          ( [Aa]lt[^h] $anystr )|         \
                          ( [Bb][^e] $anystr )|           \
                          ( [Bb]e[^c] $anystr )|          \
                          ( [Bb]ec[^a] $anystr )|      \
                          ( [Ii][^f] $anystr )|           \
                          ( [Ii]f $anystr_not_null )|     \
                          ( [Ww][^h] $anystr )|           \
                          ( [Ww]h[^e] $anystr )|          \
                          ( [Ww]he[^t] $anystr )|         \
                          ( [Tt][^h] $anystr )|           \
                          ( [Tt]h[^ao] $anystr )|         \
                          ( [Tt]ho[^u] $anystr )|         \
                          ( [Tt]ha[^t] $anystr )|         \
                          ( [Tt]hat $anystr_not_null ))/ $prep_pos $anylema

    ex_prep_not_conj = $prep_not_conj | $to

 # matches any of the inflections of the verb "be" 

    be_verb   =   $be_word $verb_pos be}

  # matches any word that is not a verb, but also matches the various
  # inflections of the verb "be".
    be_or_not_verb = $not_verb | $be_verb

## The ' may cause a problem, have to be treated according to their tag VBP

  # Any verb except for be verbs:
    not_be_lema   =   ( [^b] $anystr | b[^e] $anystr | be $anystr_not_null )}
    verb_not_be   =   $anyword $verb_pos $not_be_lema
    vbn_not_be    =   $anyword $vbn_pos $not_be_lema
    vbgn_not_be   =   $anyword $vbgn_pos $not_be_lema
    not_vbgn_not_be = $anyword $not_vbgn_pos $not_be_lema

##
## verb_not_have looks for verbs whose lema is not 'have'
##
    verb_not_have = $anyword $verb_pos                       \
                              (( [^h] $anystr )|             \
                                 ( h[^a] $anystr )|          \
                                ( ha[^v] $anystr )|          \
                                ( hav[^e] $anystr )|         \
                                ( have $anystr_not_null )) }

# matches any of the inflections of some verbs like: say, believe, think, ...
# Such verbs are common in the configuration: NP + say(etc.) + NP + VP
# where the second NP is the subject of the VP.
    say_lema  =  (say | think | believe )}

    say_verb  =   $anyword $verb_pos $say_lema

# The following define several options for a determiner sequence, which is
# the specifier of NP (turns an N-bar into an NP).

    dt_seq_not_null = ( $dt $of_prep $pdt ? $dt ? $ppd ?) |  \
                         ( $pdt $dt ? $ppd ?)|               \
                         ( $dt $ppd ?) | $ppd
                                                          
    restricted_dt_seq =  $pdt ? $dt ? $ppd ?
    dt_seq_for_pp =   ( $dt $of_prep ) ?
    dt_seq =          ( $dt $of_prep ) ? $restricted_dt_seq 

# a sequence of adverbs, optionally separated by a comma or a conjunction
    adv_list = $adv ( $ex_cc ? $adv )*

#
# a sequence of adjectives (or adjectives and participles), optionally
# separated by a comma or a conjunction. Each can be preceded by a sequence of
# adverbs.
#

## These rules must use  ':=' because they mark the main modifier
##  (which is the last one on the sequence).

    s_mod_list_1_adj := $adv_list ? main=$adj 
    s_mod_list_1 := $adv_list ? main=$ex_adj

    s_mod_list_adj = $s_mod_list_1_adj $ex_cc ? \
        ( ( $s_mod_list_1 $ex_cc ? ) | ( $prop_noun_seq $cc ? )) *
    s_mod_list = ( ( $s_mod_list_1 $ex_cc ? ) | ( $prop_noun_seq $cc ? )) +

# modifiers of a noun (all the above, including nouns)

    num_value = $dlr ? $cd
    num_prefix = $num_value $out ? $of_prep 
    num_modifiers = $restricted_dt_seq $s_mod_list_adj ? $num_prefix
    mod_list_adj := $noun_single * $s_mod_list_adj ( $noun + $s_mod_list ) *
    mod_list := $noun_single * $s_mod_list ( $noun + $s_mod_list ) *
 
# modifiers of a noun (all the above, including cardinal numbers)
#    noun_mod = "(" mod_list "?"   \
#                  "(" noun "?" dlr "?" cd "+" mod_list "?)?" ")";   ##*? last
#    noun_mod_adj = "(" mod_list_adj "?"   \
#                  "(" noun "?" dlr "?" cd "+" mod_list "?)?" ")";   ##*? last

## modified so it will not fit an empty string, otherwise the
## parser would enter an infinite loop.

    noun_mod :=  ( $mod_list ? $noun_single ? $num_value $mod_list ?) | \
                   $mod_list  ##*? last
    noun_mod_adj := ( $mod_list_adj ? $noun_single ? $num_value $mod_list ?) | \
                   $mod_list_adj  ##*? last

## These rules must use  ':=' because they mark the head noun
##  (the last noun).

    n_bar := $noun_mod ? ( $noun ) * head=$noun
    n_bar_adj := $noun_mod_adj  ( $noun ) * head=$noun


# The following describe an N-bar including a possessive qualifier.
## noun_mod is optional (in proj1.awk it could be empty)

    pos_h = $pos $cd * $s_mod_list ? 
    pos_chn := $noun_mod ? ( $noun ) * \
       ( $noun $pos_h $noun * ) ? head=$noun   ##*? last
    pos_chn_adj :=  $noun_mod_adj  ( $noun ) * \
       ( $noun $pos_h $noun * ) ? head=$noun    ##*? last

# np defines a full NP. We allow for three types:
# 1. An NP that has no specifier (no determiner of any sort). Such an NP
#    must not start with a present/past participle (e.g., "working people" may
#    be an NP, but "smoking cigarettes" is probably not. We exclude them both.)
# 2. An NP with a not-null specifier - the previous restriction does not apply
#    (e.g., "the loving people" is unambiguous, as opposed to "loving people").
# 3. An NP headed by a pronoun - normally the NP will contain nothing else,
#    but we allow for some kinds of specifiers (e.g., they, most of them, all
#    of them, five of them).
# Note: in some cases a sequence of two NPs will be analysed as one (if the
#       second one is not preceded by a determiner).

##
## The information about the head and the main modifier is
## contained in noun_mod and pos_chn rule groups
##
    np := $pos_chn_adj | $pos_chn  | $prop_noun_seq | \
          ((  $dt_seq_not_null  |   ( $num_modifiers $restricted_dt_seq  ))   \
                          ( $pos_chn_adj | $pos_chn  ))|      \
          (((  $adj $of_prep  )|  $dt_seq_for_pp  |                           \
                          (  $num_modifiers $restricted_dt_seq  ))  $pp  )

    prefixed_np =                                                             \
         ((( $dt_seq_not_null | ( $num_modifiers $restricted_dt_seq ))   \
                                         ( $n_bar | $pos_chn ))|    \
         ((( $adj $of_prep )| $dt_seq_for_pp |                             \
                         ( $num_modifiers $restricted_dt_seq )) $pp ))

# The following define a prepositional phrase. This basically consists of a
# preposition and a noun phrase. There are cases where we also accept that
# the complement of the preposition be a non-finite clause, with a (phono-
# logically) missing subject, and a gerund for a verb. For example, "against
# smoking cigarttes" is accepted by prep_ph_with_part, not by prep_ph.

    prep_ph = $ex_prep_not_conj $adv * $np
    prep_ph_with_part =                                 \
            $ex_prep_not_conj ( $adv | $vbg | $vbn ) ? $np        ##*?
    prep_ph_with_part_np =                              \
            $ex_prep_not_conj ( $adv | $vbg | $vbn ) ?  $np $cd *  ##*?
    prep_ph_not_of_than_np = $ex_prep_not_of_than $adv * $np $cd * 
    prep_ph_of_np = $of_prep $adv * $np $cd * 
    prep_ph_np = $ex_prep_not_conj $adv * $np $cd * 

# a sequence of prepositional phrases (last one is not headed by "of","than")
    pp_seq_np = $prep_ph ? $prep_ph_not_of_than_np             ##*?

# an NP followed by a sequence of prepositional phrases
# (see the patterns using it for explanations)
#   np_with_pps = ( ( $verb $ex_prep_not_conj ) | $conj_prep | $say_verb ) \
    np_with_pps := \
                     $adv ? $np $cd *                                     \
                    ( $prep_ph_with_part  $prep_ph_with_part ? ) ?    ##*?

# Structures which represent details about proper nouns:

    ex_wdt = $wdt | $wp
    pn_wdtp_not_be := $prop_noun_seq $comma $ex_wdt $ex_verb * v=$verb_not_be
    pn_wdtp_be_n := $prop_noun_seq $comma $ex_wdt $ex_verb * $be_verb $n_bar
    pn_be_n := $prop_noun_seq $ex_verb * $be_verb $n_bar
    pn_dt_n := $prop_noun_seq $comma $dt ? $n_bar
    pn_ppd_n := $prop_noun_seq $ex_verb * $ppd $n_bar
    pn_wpd_n := $prop_noun_seq $comma $wpd $n_bar

QUOTE:    n_seq  =  ( $noun_single ) * ( $noun | $prop_noun )

BRIEF,B_MOD,B_HEAD:    n_n_a = mod=$noun_single ( $ex_adj | $cd ) * OVERLAP head=$noun
BRIEF,B_MOD,B_HEAD:    n_n_aa = mod=$noun_single   ( $ex_adj | $cd ) * OVERLAP $noun_single_not_prop   ( $ex_adj | $cd ) *   head=$noun

#
# the middle line was taken from v_o_b
#
BRIEF,B_N1,B_PREP,B_HEAD:    n_prep_n = n1=$noun \
  ( $ex_verb | $adv ) * $verb_not_have ? $adv * $vbn ? \
  prep=( $ex_prep_not_conj | $of_prep ) $cd ? OVERLAP $np

BRIEF,B_SUBJ,B_HEAD:    n_s_n_c = subj=$noun_single  $cd * $pos $n_bar

# The following matches an adjective which serves as the predicate of an NP.
# We do not restrict the verb to be "be", as other copula verbs may serve as
# well.
# We demand that the NP not be preceded by a verb, to make sure that it is not a
# part of a relative clause, as in "The man who wrote the book was wise", which
# should not be analysed as if "wise" referred to "the book".
# We demand that the NP not be preceded by a preposition, as in this case the
# NP probably belongs to a prepositional phrase that is the adjunct of another
# noun, to which the adjective refers. For example, "The bird on the roof is
# green" must not be analysed as if "green" referred to "the roof".
# (Exceptions are subordinating prepositions, prepositions in the beginning of
# a line, and prepositions followed by a verb - which are all allowed before
# the NP.)
# We don't allow for a noun or an adjective at the end of the pattern. This aims
# to avoid sentences like "He hates big apples" or "He hates big green apples"
# being analysed as if they involved an adjective-noun relation between "big"
# and "he".
# Note that the overlap option is set, in order to allow pat 2 to find all
# adjective-noun relations inside the NP.
#           example: The <clouded sky> must definitely be <grey>.
#           example: <He> looks <nice>.

BRIEF,B_HEAD,B_MAIN:    a_n_a = $np_with_pps ( $ex_verb | $adv ) * $verb $adv * main=$adj

#        overlap[1] = 1;

# The following matches an adjective which serves as the attribute of a noun.
# Note that the overlap option is set, as there may be multiple adjectives
# modifying the same noun.
#           example: <beautiful> and lovely <people>.
#                    beautiful and <lovely> <people>.     [two matches]

#      temp_s_mod_list_adj :=  main=$adj  ( $ex_cc ? $s_mod_list_1 ) *
#      new_mod_list_adj =  $temp_s_mod_list_adj ( $noun + $temp_s_mod_list_adj ) *
#      new_noun_mod_adj = $new_mod_list_adj ( $noun ? $dlr ? $cd + $mod_list ? ) *
# DBG,BRIEF:    a_n_b = $new_noun_mod_adj $n_bar

# a_n_b/ba allowes for the main modifier to be adj or ex_adj

BRIEF,B_MAIN,B_HEAD:   a_n_b = $noun_single * $s_mod_list_1 $ex_cc ? OVERLAP \
    ( $noun_single *  ( ( $s_mod_list_1 $ex_cc ? ) | ( $prop_noun_seq $cc ? ) )) * \
            $cd ? $noun_single * head=$noun

BRIEF,B_MAIN,B_HEAD:   a_n_ba = $noun_single * $s_mod_list_1 $ex_cc ? OVERLAP \
    ( $noun_single *  ( ( $s_mod_list_1 $ex_cc ? ) | ( $prop_noun_seq $cc ? ) )) * \
                $cd ?  $noun_single * head=$noun_single  $noun

# BRIEF:        a_n_c = $n_bar_adj

 
    #----------------------------------------
    # (3) Patterns for subject(n1) + verb(v1)
    #----------------------------------------

# The following matches an NP followed by a verb. We allow for prepositional
# phrases to intervene between them.
# We demand that the NP not be preceded by a verb, as in this case it is
# reasonable to assume that the NP is the object of that verb, as in "The man
# that saw you is there" (which should not be analysed as if "you" were the
# subject and "is" were the verb). An exception is a class of verbs like "say"
# and "believe", which come frequently in the configuration: "He said <he>
# <was>".
# We demand that the NP not be preceded by a preposition, as in this case the
# NP probably belongs to a prepositional phrase that is the adjunct of the real
# subject. (Exceptions are subordinating prepositions, prepositions in the
# beginning of a line, and prepositions followed by a verb - which are all
# allowed before the NP.)
# Note that we explicitly forbid the verb to be a participle. This excludes
# cases like "the book read by ... was" analysed as if "book" were the subject
# of "read".
# ("The boy has eaten" is prefectly valid and is allowed.)
# We include in the pattern adverbs following the verb, and don't allow for
# a verb at the end of the pattern. This aims to avoid sentences like "I have
# never been there" being analysed as if the verb were "have".
# The overlap option is set to -2. So, if the sentence is "... but they say they
# are satisfied", the first match will be "but they say they", then the next
# search will start with "say", and will match "say they are satisified".
# We cannot reset overlap (to 0), as we do not want multiple occurrences of
# the same s-v, each starting in another position inside the NP.
# Note that questions involving auxiliary inversion are not matched by this
# pattern.
#           example: The <boy> has never <played>.
#           example: said that the <box> under the table may <fall>.

#        pat[1] = n1_with_pps                                               
#                  "(((" ex_verb "|" adv ")*"  not_vbgn_v1  ")|"           
#          "(" adv  "*" ex_verb "(" ex_verb "|" adv ")*"  vbgn_v1  "))"     
#                               particle "?" adv "*" not_adv_v;
#        overlap[1] = -2;

## modal was ex_verb (taken out)
## np was np_with_pps
##                  ((( $modal | $adv ) *  v1=$not_vbgn  ) |      \
BRIEF,B_HEAD,B_V:    s_v_a =  $np_with_pps  \
                 (( ( $ex_verb | $adv ) * v1=$not_vbgn  ) |      \
          ( $adv  * v2=$ex_verb ( $ex_verb | $adv ) *  $vbgn  ))  \
                               $particle ? $adv * $not_adv_v


# The following matches an existential "there", used as expletive.
# In this case, the NP that comes after the verb is the subject of the clause.
#           example: There <is> a <book> on the table.
#           example: There <comes> my <friend>.

BRIEF,B_HEAD,B_V:        s_v_b = $ex ( $ex_verb | $adv ) * v=$verb $np $cd * $not_cd_n


# The following matches an existential "there", used as expletive, in
# interrogative structure.
# In this case, the NP that comes after the expletive is the subject of the
# clause.
#           example: <Is[n't]> there a <book> on the table?

BRIEF,B_HEAD,B_V:       s_v_c = v=$verb $adv * $ex $adv * $np $cd * $not_cd_n


    #---------------------------------------
    # (2) Patterns for verb(v1) + object(n1)
    #---------------------------------------

# The following matches a verb follwed by a NP. It can occur in two cases:
# 1. the NP is the object of a transitive verb (or the first object of a
#    ditransitive verb);
#           example: I will <write> virtually all of the splendid <book>.
#           example: I <gave> <John> the book.
# 2. the NP is the second object of a ditransitive verb in the passive voice.
#           example: John will be <given> the <book>.
# Of course, this pattern will match occurrences where the NP is an adjunct
# rather than a complement.
#           example: * I will <come> the next <week>.
# The verb must not be in the participle form (this is handled by pat 4).
# We demand that the word following the matched string not be a verb. In this
# way it is guaranteed that "he" is not analysed as the object of "said" in a
# configuration like "She said he was ...". However, this requirement reduces
# recall, as a sentence like "The man who <saw> <you> is there" will be skipped.
# Possible solutions may be to check whether the verb+object are a part of a
# subordinate clause, or to deal separately with verbs like say, think, etc.
# Note: although English is an SVO language, there are cases where the order is
# VS, namely the verb precedes the subject. An example is "..., said John".
# It is hard to avoid such cases (a special treatment of some specific verbs
# will work nicely. Note however that "say" IS a transitive verb, as in "he said
# a nice thing".)
# The notion of object is not so trivial as we assume here. For example, a
# linguist may claim that "Mary" in a sentence like "I believe Mary to be here"
# is not the object of the matrix clause, but rather the subject of the
# subordinate clause. This is opposed to "I asked Mary to come", where "Mary" is
# analysed as the object of the matrix clause. A similar problem is sentences
# like "I consider him a nice person", where this program regards the verb
# (somewhat naively) as ditransitive. For practical purposes, we regard the
# relevant NP as the object in all these cases.
# Note: in cases of auxiliary inversion (as in questions), the subject is
# analyzed as the object of the auxiliary. This must be avoided.

BRIEF,B_HEAD,B_V: v_o_a = v=$not_vbgn $adv * OVERLAP $np $cd * $not_cd_n_ex_verb

# The following matches the subject and the verb of a passive clause.
# The verb is restricted to be in the past participle form, but the auxiliary
# is not restricted to be the verb "be", so that forms with other verbs are
# matched as well. The auxiliary is restricted not to be the verb "have",
# otherwise this pattern would match a perfective structure.
# The word preceding the subject NP must not be a verb, to avoid incorrect
# parsing of subordinate clauses. For example, to avoid "The man who stole the
# car was caught" being analysed as if "the car" were the subject (and "caught"
# were the verb).
# The word preceding the subject NP must not be a preposition, to avoid
# incorrect parsing of prepositional phrases. For example, to avoid "The bird
# on the roof was seen" being analysed as if "the roof" were the subject (and
# "seen" were the verb).
# Note that the overlap option is set, in order to allow for ditransitive
# verbs in the passive voice to be matched by pattern 1 as well.
#           example: The <book> may never have been <written>.
#           example: <John> will be <given> the book.
## (in this implementation different rules may be matched independently)
##
# A suggestion for improvement: replace the first line of pat[2] by n1_with_pps,
# so that pat[2] becomes analog to pat[1] of sv and an.

## verb_not_have made optional to allow "the book given..."

BRIEF,B_HEAD,B_V:  v_o_b = $np $cd * $prep_ph_with_part ?                 \
            ( $ex_verb | $adv ) * $verb_not_have ? $adv * v=$vbn $not_verb ##*?

#        overlap[2] = 1;

# The following matches a ditransitive verb and its second object.
# When there are two successive nouns (not separated by a determiner of some
# sort) it is not clear whether they compose a single NP or two NPs. (cf. I
# saw a brick house" vs. "I gave the child candies"). In such cases, it is
# assumed that this is a single NP, so the whole sequence is matched by pattern
# 1 (and only by this pattern).
#           example: I <gave> John the <book>.

BRIEF,B_HEAD,B_V: v_o_c = v=$verb $adv * $np $prefixed_np $cd * $not_cd_n
#        overlap[3] = 0;

# the following is similar to pattern 1, and is used when the verb is a gerund
# or a part participle, to assure that is is not actually a part of an NP. For
# example, we want to exclude "the drinking water" but we allow "They
# recommended drinking water" (although there may be situations where "drinking
# water" is an NP).

BRIEF,B_HEAD,B_V: v_o_d = v=$vbgn $adv * $np $cd * $not_cd_n_ex_verb
#        overlap[4] = 0;

QUOTE,BRIEF,B_N1,B_MAIN:	pn_unt = $prop_noun_unit | $paren_pn_unit

# @pn_is_n:

BRIEF,B_N1,B_HEAD:	pn_is_n =  $pn_be_n | $pn_dt_n | $pn_wdtp_be_n

# @pn_has_n:

BRIEF,B_N1,B_HEAD:	pn_has_n = $pn_ppd_n | $pn_wpd_n

# @enc_pn:

BRIEF,B_N1:		enc_pn = $comma n1=$prop_noun_seq OVERLAP $comma

# @pn_wh_v:

BRIEF,B_N1,B_V:		pn_wh_v = $pn_wdtp_not_be

